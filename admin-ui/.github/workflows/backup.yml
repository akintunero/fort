name: Backup

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:  # Allow manual trigger

jobs:
  backup:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Backup S3 bucket
      run: |
        aws s3 sync s3://${{ secrets.AWS_BUCKET }}/admin-ui/ s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/

    - name: Backup DynamoDB table
      run: |
        aws dynamodb export-table-to-point-in-time \
          --table-arn arn:aws:dynamodb:us-east-1:123456789012:table/admin-ui-table \
          --s3-bucket ${{ secrets.AWS_BUCKET }} \
          --s3-prefix admin-ui-backup/$(date +%Y-%m-%d)/dynamodb/

    - name: Backup RDS database
      run: |
        aws rds create-db-snapshot \
          --db-instance-identifier admin-ui-db \
          --db-snapshot-identifier admin-ui-snapshot-$(date +%Y-%m-%d)

    - name: Backup EFS filesystem
      run: |
        aws efs create-backup \
          --file-system-id fs-12345678 \
          --tags Key=Name,Value=admin-ui-backup-$(date +%Y-%m-%d)

    - name: Backup EBS volumes
      run: |
        aws ec2 create-snapshot \
          --volume-id vol-12345678 \
          --description "admin-ui-backup-$(date +%Y-%m-%d)"

    - name: Backup ECR images
      run: |
        aws ecr describe-images --repository-name admin-ui | jq -r '.imageDetails[].imageTags[]' | while read tag; do
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com
          docker pull 123456789012.dkr.ecr.us-east-1.amazonaws.com/admin-ui:$tag
          docker tag 123456789012.dkr.ecr.us-east-1.amazonaws.com/admin-ui:$tag admin-ui-backup:$tag
          docker save admin-ui-backup:$tag | gzip > admin-ui-backup-$tag.tar.gz
          aws s3 cp admin-ui-backup-$tag.tar.gz s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/ecr/
        done

    - name: Backup Secrets Manager secrets
      run: |
        aws secretsmanager list-secrets | jq -r '.SecretList[].Name' | while read secret; do
          aws secretsmanager get-secret-value --secret-id $secret | jq -r '.SecretString' > $secret.json
          aws s3 cp $secret.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/secrets/
        done

    - name: Backup Systems Manager parameters
      run: |
        aws ssm get-parameters-by-path --path /admin-ui/ --recursive | jq -r '.Parameters[].Name' | while read param; do
          aws ssm get-parameter --name $param --with-decryption | jq -r '.Parameter.Value' > $param.txt
          aws s3 cp $param.txt s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/ssm/
        done

    - name: Backup CloudWatch logs
      run: |
        aws logs describe-log-groups | jq -r '.logGroups[].logGroupName' | while read group; do
          aws logs create-export-task \
            --log-group-name $group \
            --from-time $(date -d "1 day ago" +%s000) \
            --to-time $(date +%s000) \
            --destination s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/logs/ \
            --destination-prefix $group
        done

    - name: Backup CloudTrail logs
      run: |
        aws cloudtrail start-logging --name admin-ui-trail
        aws cloudtrail get-trail-status --name admin-ui-trail
        aws s3 sync s3://admin-ui-trail-logs/ s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/cloudtrail/

    - name: Backup Config rules
      run: |
        aws configservice describe-config-rules | jq -r '.ConfigRules[].ConfigRuleName' | while read rule; do
          aws configservice get-config-rule --config-rule-name $rule > $rule.json
          aws s3 cp $rule.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/config/
        done

    - name: Backup GuardDuty findings
      run: |
        aws guardduty list-findings --detector-id 1234567890abcdef01234567890abcdef | jq -r '.FindingIds[]' | while read finding; do
          aws guardduty get-findings --detector-id 1234567890abcdef01234567890abcdef --finding-ids $finding > $finding.json
          aws s3 cp $finding.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/guardduty/
        done

    - name: Backup Inspector findings
      run: |
        aws inspector list-findings --assessment-run-arn arn:aws:inspector:us-east-1:123456789012:target/0-AB6DMKnv/run/0-EXAMPLE | jq -r '.findingArns[]' | while read finding; do
          aws inspector describe-findings --finding-arns $finding > $finding.json
          aws s3 cp $finding.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/inspector/
        done

    - name: Backup Macie findings
      run: |
        aws macie list-findings | jq -r '.findings[].id' | while read finding; do
          aws macie get-finding --id $finding > $finding.json
          aws s3 cp $finding.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/macie/
        done

    - name: Backup Shield protections
      run: |
        aws shield list-protections | jq -r '.Protections[].Id' | while read protection; do
          aws shield describe-protection --protection-id $protection > $protection.json
          aws s3 cp $protection.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/shield/
        done

    - name: Backup WAF rules
      run: |
        aws waf list-web-acls --scope REGIONAL | jq -r '.WebACLs[].Name' | while read acl; do
          aws waf get-web-acl --name $acl --scope REGIONAL --id 1234567890abcdef01234567890abcdef > $acl.json
          aws s3 cp $acl.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/waf/
        done

    - name: Backup KMS keys
      run: |
        aws kms list-keys | jq -r '.Keys[].KeyId' | while read key; do
          aws kms describe-key --key-id $key > $key.json
          aws s3 cp $key.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/kms/
        done

    - name: Backup Secrets Manager secrets
      run: |
        aws secretsmanager list-secrets | jq -r '.SecretList[].Name' | while read secret; do
          aws secretsmanager get-secret-value --secret-id $secret | jq -r '.SecretString' > $secret.json
          aws s3 cp $secret.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/secrets/
        done

    - name: Backup Systems Manager documents
      run: |
        aws ssm list-documents | jq -r '.DocumentIdentifiers[].Name' | while read doc; do
          aws ssm get-document --name $doc > $doc.json
          aws s3 cp $doc.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/ssm/
        done

    - name: Backup CloudFormation stacks
      run: |
        aws cloudformation list-stacks | jq -r '.StackSummaries[].StackName' | while read stack; do
          aws cloudformation get-template --stack-name $stack > $stack.json
          aws s3 cp $stack.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/cloudformation/
        done

    - name: Backup Elastic Beanstalk applications
      run: |
        aws elasticbeanstalk describe-applications | jq -r '.Applications[].ApplicationName' | while read app; do
          aws elasticbeanstalk describe-application-versions --application-name $app > $app.json
          aws s3 cp $app.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/elasticbeanstalk/
        done

    - name: Backup EKS clusters
      run: |
        aws eks list-clusters | jq -r '.clusters[]' | while read cluster; do
          aws eks describe-cluster --name $cluster > $cluster.json
          aws s3 cp $cluster.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/eks/
        done

    - name: Backup ECR repositories
      run: |
        aws ecr describe-repositories | jq -r '.repositories[].repositoryName' | while read repo; do
          aws ecr describe-images --repository-name $repo > $repo.json
          aws s3 cp $repo.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/ecr/
        done

    - name: Backup ECS clusters
      run: |
        aws ecs list-clusters | jq -r '.clusterArns[]' | while read cluster; do
          aws ecs describe-clusters --clusters $cluster > $cluster.json
          aws s3 cp $cluster.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/ecs/
        done

    - name: Backup ECR Public repositories
      run: |
        aws ecr-public describe-repositories | jq -r '.repositories[].repositoryName' | while read repo; do
          aws ecr-public describe-images --repository-name $repo > $repo.json
          aws s3 cp $repo.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/ecr-public/
        done

    - name: Backup ECR Public Gallery repositories
      run: |
        aws ecr-public describe-repositories | jq -r '.repositories[].repositoryName' | while read repo; do
          aws ecr-public describe-images --repository-name $repo > $repo.json
          aws s3 cp $repo.json s3://${{ secrets.AWS_BUCKET }}/admin-ui-backup/$(date +%Y-%m-%d)/ecr-public-gallery/
        done 